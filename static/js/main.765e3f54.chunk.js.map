{"version":3,"sources":["Components/Block.tsx","Components/Time.tsx","Store/counterStatusReducer.ts","utils/time.ts","Store/counterReducer.ts","Store/targetTimeReducer.ts","Components/Counter.tsx","svg/person.tsx","Store/nameListReducer.ts","svg/remove.tsx","Components/NameRow.tsx","Components/NameList.tsx","svg/result.tsx","Components/ResultModal.tsx","App.tsx","Store/index.ts","index.tsx"],"names":["Block","children","styles","h","style","spacing","borderRadius","border","boxShadow","p","direction","align","Time","useSelector","state","counter","hours","minutes","seconds","validHours","counterStatus","status","Number","validMinutes","validSeconds","fontSize","RESET","START","PAUSE","END","initialState","convertToMinutes","convertToSeconds","formatTime","millisec","Math","floor","toLocaleString","undefined","minimumIntegerDigits","replace","CHANGE_MODE","CHANGE_TIME","COUNTDOWN","mode","SET_TARGET_TIME","targetTime","Counter","nameList","time","numberInvalid","useMemo","listIsEmpty","length","dispatch","useDispatch","interval","useRef","modeIndex","useEffect","current","setInterval","type","clearInterval","mb","fontWeight","variant","colorScheme","index","onChange","payload","height","justify","mr","value","e","number","isNaN","target","onClick","operation","disabled","w","justifyContent","alignItems","minW","maxW","color","thickness","Person","width","viewBox","fill","xmlns","d","GENERATE_NAMES","ADD_NAME","REMOVE_NAME","REMOVE_ALL","chance","Chance","random","Remove","fillOpacity","NameRow","name","id","useState","hovered","setHovered","onMouseEnter","onMouseLeave","borderBottom","button","visibility","display","NameList","toast","useToast","maxH","ml","whiteSpace","onSubmit","preventDefault","title","isClosable","columns","mt","placeholder","spacingY","spacingX","overflow","map","nameData","Result","x","rx","ResultModal","winner","setWinner","handleReset","randomIndex","isOpen","onClose","isCentered","blockScrollOnMount","closeOnOverlayClick","closeOnEsc","m","textAlign","App","pt","allReducers","combineReducers","action","newTime","generatedNames","Array","from","keys","android_id","filter","data","store","createStore","root","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.765e3f54.chunk.js","sourcesContent":["import { Flex, Stack } from \"@chakra-ui/layout\";\nexport default function Block({\n  children,\n  styles,\n}: {\n  children: React.ReactNode;\n  styles?: React.CSSProperties;\n}) {\n  return (\n    <Stack\n      h=\"480px\"\n      style={styles}\n      spacing={0}\n      borderRadius={16}\n      border=\"1px solid #E2E8F0\"\n      boxShadow=\"0px 1px 3px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.06)\"\n      p={[\"32px 16px\", \"48px 48px\", \"48px 48px\"]}\n    >\n      <Flex direction=\"column\" align=\"center\" h=\"100%\">\n        {children}\n      </Flex>\n    </Stack>\n  );\n}\n","import { Text } from \"@chakra-ui/layout\";\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../Store\";\n\nexport default function Time() {\n  const { hours, minutes, seconds } = useSelector(\n    (state: RootState) => state.counter\n  );\n  const { status } = useSelector((state: RootState) => state.counterStatus);\n  const validHours = Number(minutes) > -1 ? hours : \"00\";\n  const validMinutes = Number(minutes) > -1 ? minutes : \"00\";\n  const validSeconds = Number(minutes) > -1 ? seconds : \"00\";\n\n  return (\n    <Text fontSize={[\"5xl\", \"6xl\", \"6xl\"]}>\n      {validHours}:{validMinutes}:{validSeconds}\n    </Text>\n  );\n}\n","import { convertToMinutes, convertToSeconds, formatTime } from \"../utils/time\";\n\nexport const RESET = \"RESET\";\nexport const START = \"START\";\nexport const PAUSE = \"PAUSE\";\nexport const END = \"END\";\nexport type StateType = {\n  status: \"initial\" | \"started\" | \"ended\" | \"paused\";\n};\ntype ActionType =\n  | {\n      type: \"RESET\";\n    }\n  | {\n      type: \"START\";\n    }\n  | {\n      type: \"PAUSE\";\n    }\n  | {\n      type: \"END\";\n    };\n\nconst initialState: StateType = {\n  status: \"initial\",\n};\nexport const counterStatusReducer = (\n  state = initialState,\n  action: ActionType\n): StateType => {\n  switch (action.type) {\n    case RESET: {\n      return {\n        status: \"initial\",\n      };\n    }\n    case PAUSE: {\n      return {\n        status: \"paused\",\n      };\n    }\n    case END: {\n      return {\n        status: \"ended\",\n      };\n    }\n    case START: {\n      return {\n        status: \"started\",\n      };\n    }\n    default:\n      return state;\n  }\n};\n","export const convertToMinutes = ({\n  hours,\n  minutes,\n}: {\n  hours: string;\n  minutes: string;\n}) => Number(hours) * 60 + Number(minutes);\n\nexport const convertToSeconds = ({\n  hours,\n  minutes,\n  seconds,\n}: {\n  hours: string;\n  minutes: string;\n  seconds: string;\n}) => Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n\nexport const formatTime = (millisec: number) => {\n  const formattedHours = Math.floor(millisec / (1000 * 60 * 60))\n    .toLocaleString(undefined, { minimumIntegerDigits: 2 })\n    .replace(/,/g, \"\");\n  const formattedMinutes = Math.floor(\n    (millisec / (1000 * 60)) % 60\n  ).toLocaleString(undefined, { minimumIntegerDigits: 2 });\n  const formattedSeconds = Math.floor((millisec / 1000) % 60).toLocaleString(\n    undefined,\n    { minimumIntegerDigits: 2 }\n  );\n  return {\n    hours: formattedHours,\n    minutes: formattedMinutes,\n    seconds: formattedSeconds,\n  };\n};\n","import { convertToMinutes, convertToSeconds, formatTime } from \"../utils/time\";\n\nexport const CHANGE_MODE = \"CHANGE_MODE\";\nexport const CHANGE_TIME = \"CHANGE_TIME\";\nexport const COUNTDOWN = \"COUNTDOWN\";\n\nconst initialState = {\n  hours: \"00\",\n  minutes: \"00\",\n  seconds: \"00\",\n  mode: \"min\",\n};\n\ntype ActionType =\n  | {\n      type: \"CHANGE_MODE\";\n      payload: \"min\" | \"sec\";\n    }\n  | {\n      type: \"CHANGE_TIME\";\n      payload: {\n        operation: \"increment\" | \"decrement\" | undefined;\n        value: number;\n      };\n    }\n  | {\n      type: \"COUNTDOWN\";\n    };\n\nexport const counterReducer = (state = initialState, action: ActionType) => {\n  switch (action.type) {\n    case COUNTDOWN: {\n      const time =\n        (convertToSeconds({\n          hours: state.hours,\n          minutes: state.minutes,\n          seconds: state.seconds,\n        }) -\n          1) *\n        1000;\n\n      return {\n        ...state,\n        ...formatTime(time),\n      };\n    }\n\n    case CHANGE_MODE:\n      if (action.payload === \"sec\") {\n        const time =\n          convertToSeconds({\n            hours: state.hours,\n            minutes: state.minutes,\n            seconds: state.seconds,\n          }) * 1000;\n\n        return {\n          ...state,\n          mode: action.payload,\n          ...formatTime(time),\n        };\n      } else {\n        const time =\n          Math.floor(\n            convertToSeconds({\n              hours: state.hours,\n              minutes: state.minutes,\n              seconds: state.seconds,\n            }) / 60\n          ) *\n          1000 *\n          60;\n\n        return {\n          ...state,\n          mode: action.payload,\n          ...formatTime(time),\n        };\n      }\n\n    case CHANGE_TIME: {\n      if (state.mode === \"min\") {\n        if (action.payload.operation === \"increment\") {\n          const newTime =\n            (convertToMinutes({ hours: state.hours, minutes: state.minutes }) +\n              1) *\n            60 *\n            1000;\n          return {\n            ...state,\n            ...formatTime(newTime),\n          };\n        } else if (action.payload.operation === \"decrement\") {\n          const minutes = convertToMinutes({\n            hours: state.hours,\n            minutes: state.minutes,\n          });\n          const newTime = (minutes - 1) * 60 * 1000;\n          if (minutes === 0) {\n            return state;\n          } else {\n            return {\n              ...state,\n              ...formatTime(newTime),\n            };\n          }\n        } else {\n          return {\n            ...state,\n            ...formatTime(action.payload.value * 60 * 1000),\n          };\n        }\n      } else {\n        if (action.payload.operation === \"increment\") {\n          const newTime =\n            (convertToSeconds({\n              hours: state.hours,\n              minutes: state.minutes,\n              seconds: state.seconds,\n            }) +\n              1) *\n            1000;\n          return {\n            ...state,\n            ...formatTime(newTime),\n          };\n        } else if (action.payload.operation === \"decrement\") {\n          const seconds = convertToSeconds({\n            hours: state.hours,\n            minutes: state.minutes,\n            seconds: state.seconds,\n          });\n          const newTime = (seconds - 1) * 1000;\n          if (seconds === 0) {\n            return state;\n          } else {\n            return {\n              ...state,\n              ...formatTime(newTime),\n            };\n          }\n        } else {\n          return {\n            ...state,\n            ...formatTime(action.payload.value * 1000),\n          };\n        }\n      }\n    }\n\n    default:\n      return state;\n  }\n};\n","export const SET_TARGET_TIME = \"SET_TARGET_TIME\";\n\nconst initialState = {\n  targetTime: 0,\n};\n\ntype ActionType = {\n  type: \"SET_TARGET_TIME\";\n  payload: number;\n};\n\nexport const targetTimeReducer = (state = initialState, action: ActionType) => {\n  switch (action.type) {\n    case SET_TARGET_TIME: {\n      return {\n        targetTime: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import {\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n} from \"@chakra-ui/number-input\";\nimport {\n  Flex,\n  InputRightElement,\n  Tabs,\n  Tab,\n  TabList,\n  Button,\n  CircularProgress,\n} from \"@chakra-ui/react\";\nimport Block from \"./Block\";\nimport Time from \"./Time\";\nimport { RootState } from \"../Store\";\nimport { Box, Center, Text } from \"@chakra-ui/layout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useMemo, useRef } from \"react\";\nimport { END, PAUSE, START } from \"../Store/counterStatusReducer\";\nimport { convertToMinutes, convertToSeconds } from \"../utils/time\";\nimport { CHANGE_TIME, CHANGE_MODE, COUNTDOWN } from \"../Store/counterReducer\";\nimport { SET_TARGET_TIME } from \"../Store/targetTimeReducer\";\n\nexport default function Counter() {\n  // const [targetTime, setTargetTime] = useState(0);\n  const { mode, hours, minutes, seconds } = useSelector(\n    (state: RootState) => state.counter\n  );\n  const { nameList } = useSelector((state: RootState) => state.nameList);\n  const { status } = useSelector((state: RootState) => state.counterStatus);\n  const { targetTime } = useSelector((state: RootState) => state.targetTime);\n  const time = convertToSeconds({ hours, minutes, seconds });\n  const numberInvalid = useMemo(() => Number(time) < 1, [time]);\n  const listIsEmpty = useMemo(() => !nameList.length, [nameList]);\n  const dispatch = useDispatch();\n  let interval = useRef<any>();\n  const modeIndex = mode === \"min\" ? 0 : 1;\n  const handleModeChange = (index: number) => {\n    if (index === 0) {\n      dispatch({ type: CHANGE_MODE, payload: \"min\" });\n    } else {\n      dispatch({ type: CHANGE_MODE, payload: \"sec\" });\n    }\n  };\n  const handleIncrement = () => {\n    dispatch({ type: CHANGE_TIME, payload: { operation: \"increment\" } });\n  };\n  const handleDecrement = () => {\n    dispatch({ type: CHANGE_TIME, payload: { operation: \"decrement\" } });\n  };\n  const handleChangeTime = (number: number) => {\n    dispatch({ type: CHANGE_TIME, payload: { value: number } });\n  };\n\n  useEffect(() => {\n    if (status === \"started\") {\n      interval.current = setInterval(() => {\n        if (time <= 1) {\n          dispatch({\n            type: COUNTDOWN,\n          });\n          clearInterval(interval.current);\n          dispatch({ type: END });\n        } else {\n          dispatch({\n            type: COUNTDOWN,\n          });\n        }\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(interval.current);\n    };\n  }, [dispatch, status, time]);\n\n  return (\n    <Block>\n      <Text mb={4} fontSize={[\"2xl\", \"2xl\", \"3xl\"]} fontWeight=\"bold\">\n        倒數時間\n      </Text>\n\n      {status === \"initial\" ? (\n        <Box>\n          <Center h=\"48px\">\n            <Tabs\n              variant=\"soft-rounded\"\n              colorScheme=\"red\"\n              index={modeIndex}\n              onChange={handleModeChange}\n            >\n              <TabList>\n                <Tab>分鐘</Tab>\n                <Tab>秒</Tab>\n              </TabList>\n            </Tabs>\n          </Center>\n          <Flex height=\"92px\" justify=\"center\" align=\"center\">\n            <NumberInput\n              mr={[\"12px\", \"12px\", \"16px\"]}\n              value={\n                mode === \"min\"\n                  ? convertToMinutes({ hours, minutes })\n                  : convertToSeconds({ hours, minutes, seconds })\n              }\n            >\n              <NumberInputField\n                onChange={(e) => {\n                  if (isNaN(Number(e.target.value))) return;\n                  handleChangeTime(Number(e.target.value));\n                }}\n              />\n              <NumberInputStepper>\n                <NumberIncrementStepper onClick={handleIncrement} />\n                <NumberDecrementStepper onClick={handleDecrement} />\n              </NumberInputStepper>\n              <InputRightElement mr={8}>\n                {mode === \"min\" ? \"分鐘\" : \"秒\"}\n              </InputRightElement>\n            </NumberInput>\n            <Button\n              disabled={numberInvalid || listIsEmpty}\n              onClick={() => {\n                dispatch({ type: START });\n                //\n                dispatch({ type: SET_TARGET_TIME, payload: time });\n              }}\n            >\n              開始\n            </Button>\n          </Flex>\n        </Box>\n      ) : (\n        <Flex\n          direction=\"column\"\n          w=\"100%\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <Center w=\"301px\" minW=\"40px\" maxW=\"100%\">\n            <CircularProgress\n              value={(time / targetTime) * 100}\n              color=\"teal\"\n              thickness=\"12px\"\n            />\n          </Center>\n          <Center h={[\"92px\"]}>\n            <Button\n              mr={5}\n              w=\"84px\"\n              onClick={() => {\n                if (status === \"paused\") {\n                  dispatch({ type: START });\n                }\n                if (status === \"started\") {\n                  dispatch({ type: PAUSE });\n                }\n              }}\n              colorScheme={status === \"paused\" ? \"green\" : \"orange\"}\n            >\n              {status === \"paused\" ? \"繼續\" : \"暫停\"}\n            </Button>\n            <Button\n              w=\"84px\"\n              onClick={() => {\n                dispatch({ type: END });\n              }}\n              colorScheme=\"red\"\n            >\n              結束\n            </Button>\n          </Center>\n        </Flex>\n      )}\n      <Center height=\"100%\">\n        <Time />\n      </Center>\n    </Block>\n  );\n}\n","export default function Person() {\n  return (\n    <svg\n      width=\"7\"\n      height=\"9\"\n      viewBox=\"0 0 7 9\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M7 9H0V8.14286C0 7.57454 0.230468 7.02949 0.640704 6.62763C1.05094 6.22576 1.60734 6 2.1875 6H4.8125C5.39266 6 5.94906 6.22576 6.3593 6.62763C6.76953 7.02949 7 7.57454 7 8.14286V9ZM3.5 5.14286C3.15528 5.14286 2.81394 5.07635 2.49546 4.94712C2.17698 4.81789 1.8876 4.62848 1.64384 4.3897C1.40009 4.15092 1.20673 3.86745 1.07482 3.55547C0.942898 3.24349 0.875 2.90911 0.875 2.57143C0.875 2.23374 0.942898 1.89937 1.07482 1.58739C1.20673 1.27541 1.40009 0.991933 1.64384 0.753154C1.8876 0.514375 2.17698 0.324965 2.49546 0.195738C2.81394 0.0665119 3.15528 -5.0319e-09 3.5 0C4.19619 1.01624e-08 4.86387 0.270918 5.35616 0.753154C5.84844 1.23539 6.125 1.88944 6.125 2.57143C6.125 3.25341 5.84844 3.90747 5.35616 4.3897C4.86387 4.87194 4.19619 5.14286 3.5 5.14286Z\"\n        fill=\"#2D3748\"\n      />\n    </svg>\n  );\n}\n","import { Chance } from \"chance\";\nexport const GENERATE_NAMES = \"GENERATE_NAMES\";\nexport const ADD_NAME = \"ADD_NAME\";\nexport const REMOVE_NAME = \"REMOVE_NAME\";\nexport const REMOVE_ALL = \"REMOVE_ALL\";\nconst chance = new Chance(Math.random);\n\nconst initialState = {\n  nameList: [] as { name: string; id: string }[],\n};\n\ntype ActionType =\n  | {\n      type: \"GENERATE_NAMES\";\n    }\n  | {\n      type: \"ADD_NAME\";\n      payload: {\n        name: string;\n      };\n    }\n  | {\n      type: \"REMOVE_NAME\";\n      payload: {\n        id: string;\n      };\n    }\n  | {\n      type: \"REMOVE_ALL\";\n    };\n\nexport const nameListReducer = (state = initialState, action: ActionType) => {\n  switch (action.type) {\n    case GENERATE_NAMES: {\n      const generatedNames = Array.from(Array(10).keys()).map(() => ({\n        name: chance.name(),\n        id: chance.android_id(),\n      }));\n\n      return {\n        nameList: [...state.nameList, ...generatedNames],\n      };\n    }\n    case ADD_NAME: {\n      return {\n        nameList: [\n          ...state.nameList,\n          { name: action.payload.name, id: chance.android_id() },\n        ],\n      };\n    }\n    case REMOVE_NAME: {\n      return {\n        nameList: [\n          ...state.nameList.filter((data) => data.id !== action.payload.id),\n        ],\n      };\n    }\n\n    case REMOVE_ALL: {\n      return {\n        nameList: [],\n      };\n    }\n    default:\n      return state;\n  }\n};\n","export default function Remove() {\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM17 13H7V11H17V13Z\"\n        fill=\"#FF0000\"\n        fillOpacity=\"0.8\"\n      />\n    </svg>\n  );\n}\n","import { HStack } from \"@chakra-ui/layout\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Td, Tr } from \"@chakra-ui/table\";\nimport { useState } from \"react\";\nimport Remove from \"../svg/remove\";\nimport { RootState } from \"../Store\";\nexport default function NameRow({ name, id }: { name: string; id: string }) {\n  const [hovered, setHovered] = useState(false);\n  const { status } = useSelector((state: RootState) => state.counterStatus);\n  const dispatch = useDispatch();\n  return (\n    <Tr\n      h=\"48px\"\n      onMouseEnter={() => {\n        setHovered(true);\n      }}\n      onMouseLeave={() => {\n        setHovered(false);\n      }}\n    >\n      <Td borderBottom=\"none\">\n        <HStack justifyContent=\"space-between\">\n          <div>{name}</div>\n\n          <chakra.button\n            visibility={[\"visible\", \"visible\", hovered ? \"visible\" : \"hidden\"]}\n            display={status !== \"initial\" ? \"none\" : \"initial\"}\n            onClick={() => {\n              dispatch({ type: \"REMOVE_NAME\", payload: { id: id } });\n            }}\n          >\n            <Remove />\n          </chakra.button>\n        </HStack>\n      </Td>\n    </Tr>\n  );\n}\n","import Block from \"./Block\";\nimport { Center, Flex, Text } from \"@chakra-ui/layout\";\nimport { Tag } from \"@chakra-ui/tag\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Person from \"../svg/person\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Table, Tbody } from \"@chakra-ui/table\";\nimport { RootState } from \"../Store\";\nimport { ADD_NAME, GENERATE_NAMES, REMOVE_ALL } from \"../Store/nameListReducer\";\nimport NameRow from \"./NameRow\";\nimport { SimpleGrid, useToast } from \"@chakra-ui/react\";\n\nexport default function NameList() {\n  const { nameList } = useSelector((state: RootState) => state.nameList);\n  const { status } = useSelector((state: RootState) => state.counterStatus);\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const handleSubmitName = (e: any) => {\n    const valueWithoutSpaces = e.target[0].value.replace(/\\s/g, \"\");\n    if (valueWithoutSpaces.length > 0) {\n      e.preventDefault();\n      dispatch({ type: ADD_NAME, payload: { name: e.target[0].value } });\n      e.target[0].value = \"\";\n    } else {\n      e.preventDefault();\n      toast({\n        title: \"請輸入有效名稱\",\n        status: \"warning\",\n        isClosable: true,\n      });\n      e.target[0].value = \"\";\n    }\n  };\n\n  const handleRemoveAll = () => {\n    dispatch({ type: REMOVE_ALL });\n  };\n  return (\n    <Block>\n      <Flex justifyContent=\"space-between\" w=\"100%\">\n        <Center w=\"64px\" justifyContent=\"left\">\n          <Tag maxH=\"20px\">\n            <Person />\n            <Text ml={1}>{nameList.length}</Text>\n          </Tag>\n        </Center>\n        <Text\n          fontSize={[\"2xl\", \"2xl\", \"3xl\"]}\n          fontWeight=\"bold\"\n          whiteSpace=\"nowrap\"\n        >\n          抽獎名單\n        </Text>\n        <Center>\n          <Button\n            disabled={status !== \"initial\"}\n            colorScheme=\"blue\"\n            maxH=\"24px\"\n            w=\"74px\"\n            onClick={() => {\n              dispatch({ type: GENERATE_NAMES });\n            }}\n          >\n            隨機帶入\n          </Button>\n        </Center>\n      </Flex>\n\n      <form style={{ width: \"100%\" }} onSubmit={handleSubmitName}>\n        <SimpleGrid columns={[1, 2, 2]} mt=\"32px\" spacing={1}>\n          <Center>\n            <Input\n              placeholder=\"請輸入抽獎者名稱\"\n              w=\"100%\"\n              disabled={status !== \"initial\"}\n            />\n          </Center>\n          <Flex w=\"100%\" justifyContent=\"right\" alignItems=\"center\">\n            <SimpleGrid\n              columns={[1, 2, 2]}\n              spacingY={3}\n              spacingX={2}\n              w=\"100%\"\n              mt={[\"8px\", 0, 0]}\n              ml={[0, \"4px\", \"4px\"]}\n            >\n              <Button\n                colorScheme=\"green\"\n                type=\"submit\"\n                disabled={status !== \"initial\"}\n                w={[\"100%\", \"100%\", \"100%\"]}\n              >\n                新增\n              </Button>\n              <Button\n                colorScheme=\"red\"\n                onClick={handleRemoveAll}\n                disabled={status !== \"initial\"}\n                w={[\"100%\", \"100%\", \"100%\"]}\n              >\n                清空\n              </Button>\n            </SimpleGrid>\n          </Flex>\n        </SimpleGrid>\n      </form>\n      <Flex\n        w=\"100%\"\n        maxH={[\"185px\", \"250px\", \"250px\"]}\n        overflow=\"scroll\"\n        mt=\"16px\"\n        border={nameList.length > 0 ? \"1px solid #E2E8F0\" : \"none\"}\n        borderRadius=\"12px\"\n        visibility={nameList.length > 0 ? \"visible\" : \"hidden\"}\n      >\n        <Table variant=\"striped\" colorScheme=\"teal\">\n          <Tbody>\n            {nameList.map((nameData, index) => (\n              <NameRow name={nameData.name} id={nameData.id} key={index} />\n            ))}\n          </Tbody>\n        </Table>\n      </Flex>\n    </Block>\n  );\n}\n","export default function Result() {\n  return (\n    <svg\n      width=\"49\"\n      height=\"48\"\n      viewBox=\"0 0 49 48\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <rect x=\"0.5\" width=\"48\" height=\"48\" rx=\"24\" fill=\"#C6F6D5\" />\n      <path\n        d=\"M22.5007 27.1715L31.6927 17.9785L33.1077 19.3925L22.5007 29.9995L16.1367 23.6355L17.5507 22.2215L22.5007 27.1715Z\"\n        fill=\"#25855A\"\n      />\n    </svg>\n  );\n}\n","import { Center } from \"@chakra-ui/layout\";\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalHeader,\n  ModalBody,\n  ModalContent,\n} from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../Store\";\nimport { RESET } from \"../Store/counterStatusReducer\";\nimport Result from \"../svg/result\";\n\nexport default function ResultModal() {\n  const [winner, setWinner] = useState(\"\");\n  const { status } = useSelector((state: RootState) => state.counterStatus);\n  const { nameList } = useSelector((state: RootState) => state.nameList);\n  const dispatch = useDispatch();\n  const handleReset = () => {\n    dispatch({ type: RESET });\n  };\n\n  useEffect(() => {\n    if (status === \"ended\") {\n      const randomIndex = Math.floor(Math.random() * nameList.length);\n\n      setWinner(nameList[randomIndex].name);\n    }\n  }, [nameList, status]);\n  return (\n    <Modal\n      isOpen={status === \"ended\"}\n      onClose={handleReset}\n      isCentered\n      blockScrollOnMount\n      closeOnOverlayClick\n      closeOnEsc\n    >\n      <ModalOverlay />\n      <ModalContent m=\"0px 20px\">\n        <ModalHeader>\n          <Center mb=\"20px\">\n            <Result />\n          </Center>\n          <Center>抽獎結果</Center>\n        </ModalHeader>\n        <ModalBody>\n          <Center textAlign=\"center\">恭喜！得獎者為「{winner}」</Center>\n        </ModalBody>\n        <Button m=\"8px\" colorScheme=\"teal\" onClick={handleReset}>\n          繼續\n        </Button>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport Counter from \"./Components/Counter\";\nimport { Center, Flex, Text } from \"@chakra-ui/layout\";\nimport { SimpleGrid } from \"@chakra-ui/react\";\nimport NameList from \"./Components/NameList\";\nimport ResultModal from \"./Components/ResultModal\";\n\nconst App = () => {\n  return (\n    <ChakraProvider>\n      <Center>\n        <Flex\n          direction=\"column\"\n          justify=\"center\"\n          align=\"center\"\n          pt={[\"24px\", \"24px\", \"50px\"]}\n        >\n          <Text fontSize={[\"2xl\", \"2xl\", \"3xl\"]} fontWeight=\"bold\">\n            抽獎小工具\n          </Text>\n          <SimpleGrid columns={[1, 1, 2]} spacing={10} p={5}>\n            <Counter />\n            <NameList />\n          </SimpleGrid>\n        </Flex>\n      </Center>\n      <ResultModal />\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { counterReducer } from \"./counterReducer\";\nimport { counterStatusReducer } from \"./counterStatusReducer\";\nimport { nameListReducer } from \"./nameListReducer\";\nimport { targetTimeReducer } from \"./targetTimeReducer\";\n\nexport interface RootState {\n  counter: {\n    hours: string;\n    minutes: string;\n    seconds: string;\n    mode: \"min\" | \"sec\";\n  };\n  nameList: {\n    nameList: { name: string; id: string }[];\n  };\n  counterStatus: {\n    status: \"initial\" | \"started\" | \"ended\" | \"paused\";\n  };\n  targetTime: {\n    targetTime: number;\n  };\n}\n\nconst allReducers = combineReducers({\n  counter: counterReducer,\n  nameList: nameListReducer,\n  counterStatus: counterStatusReducer,\n  targetTime: targetTimeReducer,\n});\n\nexport default allReducers;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport App from \"./App\";\nimport allReducers from \"./Store\";\nconst store = createStore(allReducers);\nconst root = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  root\n);\n"],"sourceRoot":""}